// MHS Project Euler Problem 12										|
//																	|
// Problem Statement:												|
//																	|
// The sequence of triangle numbers is generated by adding The		|
// natural numbers. So the 7th triangle number would be 			|
//																	|
//				1 + 2 + 3 + 4 + 5 + 6 + 7 = 28 						|
//																	|
// The first ten terms would be:									|
//																	|
//			1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...				|
//																	|
// Let us list the factors of the first seven triangle numbers:		|
//																	|
//     1: 1															|
//     3: 1,3														|
//     6: 1,2,3,6													|
//    10: 1,2,5,10													|
//    15: 1,3,5,15													|
//    21: 1,3,7,21													|
//    28: 1,2,4,7,14,28												|
//																	|
// We can see that 28 is the first triangle number to have over 	|
// five divisors. What is the value of the first triangle numbers	|
// to have over five hundred divisors?								|
//																	|
//-------------------------------------------------------------------

// Generic Program
// Use 500 as an input for the above problem

#include <iostream>

using namespace std;

// Function to calculate the number of factors

int num_fac(int);

int main()
{
    int x;

    cout<<"Please enter the divisor count: ";
    cin>>x;

    int i = 1;

    // The series 1+2+....+n has a sum = n(n+1)/2
    // Using this formula to speed up the program

    while(true){
        if(num_fac((i*(i+1))/2)>x){
            cout<<"The first triangular number to have over "<<x<<" divisors is: "<<(i*(i+1))/2<<endl;
            return 0;
        }
        i = i + 1;
    }
}

int num_fac(int x){

    if (x == 1)
        return 1;

    // All numbers except 1 have at least 2 divisors
    // The number itself and 1
    int fac = 2;

    // An important property to note is that divisors
    // occur in pairs unless it is perfect square. For
    // example, 6 รท 2 = 3. The total divisors is 4 (1,2,3,6).
    // On the other hand, 9 รท 3 = 3. The total number of
    // divisors is 3 (1,3,9).

    // The loop only runs up to the square root of the number
    for(int i=2;i*i <= x;i++){
        // Check if the number is a perfect square. In that
        // case, up the counter by 1.
        if (i*i == x)
            fac = fac + 1;

        // Otherwise, add 2 to the counter
        else if (x%i == 0)
            fac = fac +2;
    }

    return fac;
}
