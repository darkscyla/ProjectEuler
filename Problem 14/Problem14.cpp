// MHS Project Euler Problem 14								|
//															|
// Problem Statement:										|
//															|
// The following iterative sequence is defined for			|
//  the set of positive integers:							|
//															|
//		n → n/2 (n is even)									|
//		n → 3n + 1 (n is odd)								|
//															|
// Using the rule above and starting with 13, we generated	|
// the following sequence:									|
//															|
//		13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1			|
//															|
// It can be seen that this sequence (starting at 13 and 	|
// finishing at 1) contains 10 terms. Although it has not	|
//  been proved yet (Collatz Problem), it is thought that	|
//  all starting numbers finish at 1.						|
//															|
// Which starting number, under one million, produces the	|
// longest chain?											|
//															|
// NOTE: Once the chain starts the terms are allowed to go	|
// above one million.										|
//															|
//-----------------------------------------------------------

// Generic Program
// Use 1000000 as an input for the above problem

#include <iostream>

using namespace std;

// Function to calculate the Collatz length
int collatz_length(long long int);

int main()
{
    long long int x, maxNum = 1, maxSteps = 1;

    cout<<"Enter the range: ";
    cin >> x;

    for(int i=1; i<=x; i++){
        if (collatz_length(i)>maxSteps){
            maxNum = i;
            maxSteps = collatz_length(i);
        }
    }
    cout << "The longest sequence is generated by "<<maxNum<<" in "<<maxSteps<<" steps"<<endl;

    return 0;
}

int collatz_length(long long int x){

    long long int num = x;
    int steps=1;

    while(num > 1){
        if (num%2 == 0){
            num = num/2;
            steps = steps + 1;
        }

        // If an odd number is multiplied by another odd number,
        // the result will also be odd. Adding 1 will produce an
        // even number. Performing the two steps simultaneously,
        else {
            num = (3*num+1)/2;
            steps = steps + 2;
        }
    }

    return steps;
}
